using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

public class InputManager : MonoBehaviour, GameInput.IPlayerActions
{
    // Reference to the GameInput class, which is generated by the Input System
    private GameInput gameInput;

    void Awake()
    {
        // Initialize the GameInput instance
        gameInput = new GameInput();

        // Enable the Player action map to start listening for player input
        gameInput.Player.Enable();

        // Set this script (InputManager) as the callback handler for player actions
        // This ensures methods like OnMove are called when the respective inputs are performed
        gameInput.Player.SetCallbacks(this);
    }

    // This method is called whenever the "Move" action is triggered
    // It automatically gets a context object that contains information about the input event
    public void OnMove(InputAction.CallbackContext context)
    {
        // Check if the input action is performed or canceled
        // `performed` occurs when the input starts or changes
        // `canceled` occurs when the input stops (e.g., releasing a key or joystick returning to center)
        if (context.performed || context.canceled)
        {
            // Read the value of the input Vector2 (e.g., from a joystick, WASD keys, or arrow keys)
            // Trigger the MoveEvent action and pass the value to all subscribers
            // This allows other scripts to respond to the movement input (e.g., player movement scripts)
            Actions.MoveEvent?.Invoke(context.ReadValue<Vector2>());
        }
    }

    public void OnInteract(InputAction.CallbackContext context)
    {
        Actions.InteractEvent?.Invoke();
    }

    public void OnPause(InputAction.CallbackContext context)
    {
        if (context.started)
        {
            Actions.PauseEvent?.Invoke();
        }
        
        
    }
}

public static class Actions
{
    public static Action<Vector2> MoveEvent;
    public static Action InteractEvent;
    public static Action PauseEvent;
}






